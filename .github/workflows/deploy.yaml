name: Bloggy Backend Deployment üöÄ

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  security-checks:
    name: üõ°Ô∏è Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './src'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

  build-and-deploy:
    name: üöÄ Deploy to Server - Run ${{ github.run_number }}
    runs-on: ubuntu-latest
    environment: Production
    needs: security-checks
    steps:
      - name: üîë SSH into Server for Preparation
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/bloggy/api
            rm -rf ./*
            echo "Cleared the deployment directory!"

      - name: üì• Checkout repository
        uses: actions/checkout@v3

      - name: üìÇ Upload files to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./*"  # Send all files
          target: "/home/${{ secrets.SERVER_USER }}/bloggy/api"

      - name: üîë SSH into Server & Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/bloggy/api

            # Replace the environment variables
            sed -i 's/{Env}/${{ vars.ENV_NAME }}/g' deploy.sh

            ENV_NAME_LOWER=$(echo "${{ vars.ENV_NAME }}" | tr '[:upper:]' '[:lower:]')

            for dir in ./src/*/; do
              if [ -d "$dir" ]; then # Check if it's a directory
                echo "Processing directory: $dir"

                dir_name=$(basename "$dir") # Extract directory name

                if [ -f "$dir/appsettings.json" ]; then # Check if appsettings.json exists in the directory
                  echo "Updating appsettings.json in $dir"

                  # Shared
                  sed -i "s/{env}/$ENV_NAME_LOWER/g" "$dir/appsettings.json"
                  sed -i "s|{datadog_api_key}|${{ secrets.DATADOG_API_KEY }}|g" "$dir/appsettings.json"

                  if [ "$dir_name" == "Gateway" ]; then
                    sed -i "s|{auth_jwt_issuer}|${{ vars.AUTH_JWT_ISSUER }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_jwt_audience}|${{ vars.AUTH_JWT_AUDIENCE }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_jwt_access_token_secret_key}|${{ secrets.AUTH_JWT_ACCESS_SECRET }}|g" "$dir/appsettings.json"
                    sed -i "s|{allowed_origins}|${{ vars.ALLOWED_ORIGINS }}|g" "$dir/appsettings.json"
                  fi

                  if [ "$dir_name" == "Identity" ]; then
                    sed -i "s|{mongodb_connection_string}|${{ secrets.MONGODB_CONNECTION_STRING }}|g" "$dir/appsettings.json"
                    sed -i "s|{mongodb_database_name}|${{ vars.MONGODB_DATABASE_NAME }}|g" "$dir/appsettings.json"
                    sed -i "s|"{failed_login_limit}"|${{ vars.AUTH_LOCKOUT_LIMIT }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_lockout_duration}|${{ vars.AUTH_LOCKOUT_DURATION }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_jwt_issuer}|${{ vars.AUTH_JWT_ISSUER }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_jwt_audience}|${{ vars.AUTH_JWT_AUDIENCE }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_jwt_access_token_secret_key}|${{ secrets.AUTH_JWT_ACCESS_SECRET }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_jwt_refresh_token_secret_key}|${{ secrets.AUTH_JWT_REFRESH_SECRET }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_access_token_lifetime}|${{ vars.AUTH_JWT_ACCESS_LIFETIME }}|g" "$dir/appsettings.json"
                    sed -i "s|{auth_refresh_token_lifetime}|${{ vars.AUTH_JWT_REFRESH_LIFETIME }}|g" "$dir/appsettings.json"
                  fi

                  if [ "$dir_name" == "Blog" ]; then
                    sed -i "s|{mongodb_connection_string}|${{ secrets.MONGODB_CONNECTION_STRING }}|g" "$dir/appsettings.json"
                    sed -i "s|{mongodb_database_name}|${{ vars.MONGODB_DATABASE_NAME }}|g" "$dir/appsettings.json"
                  fi

                else
                  echo "appsettings.json not found in $dir"
                fi
              fi
            done

            chmod +x deploy.sh
            sudo ./deploy.sh
